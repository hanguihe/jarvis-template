[{"/Users/han/Desktop/github/manage-system/src/components/AuthInfo/index.jsx":"1","/Users/han/Desktop/github/manage-system/src/components/DefaultFooter/index.jsx":"2","/Users/han/Desktop/github/manage-system/src/components/GlobalHeader/UserContent.jsx":"3","/Users/han/Desktop/github/manage-system/src/config/axios.config.js":"4","/Users/han/Desktop/github/manage-system/src/config/router.config.js":"5","/Users/han/Desktop/github/manage-system/src/index.js":"6","/Users/han/Desktop/github/manage-system/src/layout/BasicLayout/index.jsx":"7","/Users/han/Desktop/github/manage-system/src/layout/BlankLayout/index.jsx":"8","/Users/han/Desktop/github/manage-system/src/layout/index.js":"9","/Users/han/Desktop/github/manage-system/src/mock/user.js":"10","/Users/han/Desktop/github/manage-system/src/pages/404.jsx":"11","/Users/han/Desktop/github/manage-system/src/pages/MatchParams.jsx":"12","/Users/han/Desktop/github/manage-system/src/pages/Welcome.jsx":"13","/Users/han/Desktop/github/manage-system/src/reducer.js":"14","/Users/han/Desktop/github/manage-system/src/redux/user.redux.js":"15","/Users/han/Desktop/github/manage-system/src/router.js":"16","/Users/han/Desktop/github/manage-system/src/service/user.js":"17","/Users/han/Desktop/github/manage-system/src/serviceWorker.js":"18"},{"size":1117,"mtime":1575473317245,"results":"19","hashOfConfig":"20"},{"size":551,"mtime":1575473066177,"results":"21","hashOfConfig":"20"},{"size":1584,"mtime":1575473443462,"results":"22","hashOfConfig":"20"},{"size":1333,"mtime":1575472838307,"results":"23","hashOfConfig":"20"},{"size":1545,"mtime":1575472848136,"results":"24","hashOfConfig":"20"},{"size":1340,"mtime":1575473066595,"results":"25","hashOfConfig":"20"},{"size":930,"mtime":1575473574303,"results":"26","hashOfConfig":"20"},{"size":77,"mtime":1575473440754,"results":"27","hashOfConfig":"20"},{"size":120,"mtime":1575473066767,"results":"28","hashOfConfig":"20"},{"size":179,"mtime":1575473066823,"results":"29","hashOfConfig":"20"},{"size":422,"mtime":1575473462180,"results":"30","hashOfConfig":"20"},{"size":436,"mtime":1575473583149,"results":"31","hashOfConfig":"20"},{"size":946,"mtime":1575473524227,"results":"32","hashOfConfig":"20"},{"size":127,"mtime":1575473067175,"results":"33","hashOfConfig":"20"},{"size":542,"mtime":1575473067284,"results":"34","hashOfConfig":"20"},{"size":1185,"mtime":1575473067378,"results":"35","hashOfConfig":"20"},{"size":152,"mtime":1575473067395,"results":"36","hashOfConfig":"20"},{"size":4926,"mtime":1575473067485,"results":"37","hashOfConfig":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ojuqby",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"pudg80","/Users/han/Desktop/github/manage-system/src/components/AuthInfo/index.jsx",[],"/Users/han/Desktop/github/manage-system/src/components/DefaultFooter/index.jsx",[],"/Users/han/Desktop/github/manage-system/src/components/GlobalHeader/UserContent.jsx",[],"/Users/han/Desktop/github/manage-system/src/config/axios.config.js",[],"/Users/han/Desktop/github/manage-system/src/config/router.config.js",[],"/Users/han/Desktop/github/manage-system/src/index.js",[],"/Users/han/Desktop/github/manage-system/src/layout/BasicLayout/index.jsx",[],"/Users/han/Desktop/github/manage-system/src/layout/BlankLayout/index.jsx",[],"/Users/han/Desktop/github/manage-system/src/layout/index.js",[],"/Users/han/Desktop/github/manage-system/src/mock/user.js",[],"/Users/han/Desktop/github/manage-system/src/pages/404.jsx",[],"/Users/han/Desktop/github/manage-system/src/pages/MatchParams.jsx",[],"/Users/han/Desktop/github/manage-system/src/pages/Welcome.jsx",[],"/Users/han/Desktop/github/manage-system/src/reducer.js",[],"/Users/han/Desktop/github/manage-system/src/redux/user.redux.js",[],"/Users/han/Desktop/github/manage-system/src/router.js",[],"/Users/han/Desktop/github/manage-system/src/service/user.js",[],"/Users/han/Desktop/github/manage-system/src/serviceWorker.js",["76","77","78","79","80","81"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",{"ruleId":"82","severity":1,"message":"83","line":42,"column":11,"nodeType":"84","messageId":"85","endLine":42,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":59,"column":7,"nodeType":"88","endLine":59,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":70,"column":15,"nodeType":"84","messageId":"85","endLine":70,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":83,"column":15,"nodeType":"84","messageId":"85","endLine":83,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":95,"column":7,"nodeType":"84","messageId":"85","endLine":95,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":121,"column":7,"nodeType":"84","messageId":"85","endLine":121,"endColumn":18},"no-console","Unexpected console statement.","MemberExpression","unexpected","no-param-reassign","Assignment to property of function parameter 'registration'.","Identifier"]